---
alwaysApply: true
---
# 🧹 Optima Instructions for `Void` (VSCode Fork)

> **Repository Context**:
> This is a fork of the VSCode repo called **Void**.
> Most of the relevant code is located in:
>
> ```
> src/vs/workbench/contrib/void/
> ```
>
> You may need to explore the **entire repo** to locate services or internal utilities. Look for **built-in services**, **registrations**, and **interfaces** to extend behavior without duplication.

---

## 🔒 Repository-Specific Rules

* ❌ **Do not modify** files **outside** `src/vs/workbench/contrib/void` without explicit user approval.
* ✅ **All mappings** should use the `bOfA` naming convention:
  *e.g.*, a `Map` from `toolId` → `toolName` must be named `toolNameOfToolId`.
* 🧠 In **TypeScript**:

  * Do **not** cast types unnecessarily.
  * **Never** use `as any`—find and apply the correct type instead.
* ❎ Do **not** change semicolon usage in files—**respect existing style**.
* 🔧 Do **not run** or test code automatically. Instead, **instruct the user** on what to run to validate your changes:

  ```sh
  npm run build && npm run lint && npm test
  ```

---

## ✅ Core Behaviors

* **Autonomous & Proactive**:
  Scan the codebase, infer missing context, locate relevant files, and act independently.

* **Agentic Reasoning**:
  Make rational assumptions. Log all assumptions and reasoning clearly in code comments or commit messages.

* **Foresighted & Scalable**:
  Anticipate dependencies, suggest reusable patterns, and make changes that benefit future development.

* **Robust & Efficient**:
  Emphasize clean, performant code with proper type safety, error handling, and validation.

* **Minimal & Clean**:
  Avoid dead code and unused imports. Only add comments where necessary to explain non-obvious logic.

---

## 🛠️ Tasks to Perform

### 1. Codebase Exploration

* Understand architecture: UI, services, logic, commands, APIs, storage, and tests.
* Identify configuration files, build scripts, CI/CD, and shared utilities.

### 2. Planning Phase

* Propose a **high-level plan**:

  * List target files.
  * Note changes to structure, interfaces, or dependencies.
  * Predict test or CI impacts.

### 3. Execution Phase

* Modify or create UI, services, commands, and tests in sync.
* Ensure:

  * Type correctness
  * Full feature integration
  * No broken imports or runtime issues

### 4. Verification Phase

* **Do not run validation scripts** yourself.
* Instead, tell the user how to verify:

  ```sh
  npm run build
  npm run lint
  npm test
  ```
* Re-check reasoning and logic. If needed, revise and re-plan.

---

## 🧪 Development Style

* Use **modular, descriptive naming** across functions and files.
* Apply strong **type discipline** (avoid `any`, infer where possible).
* Always:

  * Validate user inputs
  * Handle errors gracefully
  * Optimize for performance (e.g., memoization, lazy loading)
* Write or update:

  * Unit tests
  * Integration tests
* Refactor **adjacent code** if it improves consistency or performance.

---

## 👉 Workflow Example

```markdown
**Plan**: I will update `voidEditorService.ts` to handle void panel resizing. This will also require changes in `voidPanelRenderer.ts`, the model in `voidModel.ts`, and test cases in `__tests__/voidEditor.test.ts`.

**Execute**: Implement feature with modular code, error checks, and typings.

**Verify**: Ask user to run `npm run build && npm test && npm run lint`.

**Notify**: ✅ Done! Implemented dynamic panel resizing across 3 files. All code is integrated. Please verify using the above command.
```

---

## 🌟 Continuous Mode

For every user request, enter a **Plan → Execute → Verify** loop autonomously until the feature or fix is complete, tested, and ready for review.

---

## 📚 Preferences & Engineering Standards

* 🏠 **Architecture**: Favor clean architecture with clear separation of concerns.
* ↺ **Naming**: Use `bOfA` for all mapping types.
* 📦 **Tooling**: Use modern, stable, LTS-compliant tools and dependencies.
* 🧬 **Best Practices**:

  * DRY (Don't Repeat Yourself)
  * SOLID principles
  * KISS (Keep It Simple, Smart)
* ✅ **Tests Required**:

  * Every meaningful logic change must be accompanied by relevant tests.
* 📓 **Commits**:

  * Keep them atomic and descriptive, reflecting your reasoning and scope.
